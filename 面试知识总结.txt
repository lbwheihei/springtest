需要上 https://leetcode-cn.com/ 刷题


一、java基础
1、面向对象的特征有哪些方面? 【基础】

https://www.cnblogs.com/guweiwei/p/6599289.html

2、int 和Integer 有什么区别? 【基础】

https://blog.csdn.net/chenliguan/article/details/53888018

3、Math.round(11.5) 等于多少? Math.round(-11.5)等于多少? 【基础】

ceil的英文意义是天花板，该方法就表示向上取整，Math.ceil（11.3）的结果为12，Math.ceil(-11.6)的结果为-11；
floor的英文是地板，该方法就表示向下取整，Math.floor(11.6)的结果是11，Math.floor(-11.4)的结果-12；
round方法，他表示“四舍五入”，算法为Math.floor(x+0.5),即将原来的数字加上0.5后再向下取整，所以，Math.round(11.5)的结果是12，Math.round(-11.5)的结果为-11.

4、编程题: 用最有效率的方法算出2 乘以8 等於几? 【基础】

2的二进制表示法左移3位，2的二进制应该是0000 0010，左移3位后
0001 0000（可以看成是一个框就能显示8位数据，向左移动后前面的三位不就看不到了嘛，后面的自动补0）
2 << 3 = 8

5、数组有没有 length()方法？String 有没有 length()方法？【基础】

数组没有length()方法
数组只有length属性，表示的是数组的长度。而且这个属性可以理解为止一个常量，一旦数组被产生，我们可以得到length的值，但不能改变。
String有length()方法
返回的是字符串的长度。也不能修改。

6、构造器（constructor）是否可被重写（override）？【基础】

构造器Constructor不能被继承，因此不能重写Override，但可以被重载Overload。
Constructor不能被继承，所以Constructor也就不能被override。每一个类必须有自己的构造函数，负责构造自己这部分的构造。子类不会覆盖父类的构造函数，相反必须负责在一开始调用父类的构造函数。
一、构造器是干什么用的？（what）
     构造器是用来生成一个类的实例是用来初始化这个实例用的
二、构造器如何工作？（how）
     Java在构造实例时的顺序是这样的：
1、分配对象空间，并将对象中成员初始化为0或者空，java不允许用户操纵一个不定值的对象。 　　
2、执行属性值的显式初始化 　　
3、执行构造器 　　
4 、将变量关联到堆中的对象上

而执行构造器的步骤有可以分为以下几步：

1、Bind构造器的参数
2、如果显式的调用了this，那就递归调用this构造器然后跳到步骤5
3、递归调用显式或者隐式的父类构造器，除了Object以外，因为它没有父类
4、执行显式的实例变量初始化（也就是上边的流程中的第二步，调用返回以后执行，
   这个步骤相当于在父构造器执行后隐含执行的，看样子像一个特殊处理）

三、构造器不可被orerride（why）
其实你只需要记住一句话：构造器不是方法，那么用来修饰方法特性的所有修饰符都不能用来修饰构造器（并不等与构造器具备这些特性，虽然不能用static修饰构造器，但它却有静态特性）构造器只能用 public private protected这三个权限修饰符，且不能有返回语句。

四、理解构造器为什么不能被继承
因为子类继承父类的时候，先运行父类构造函数；具体的说就是运行父类时就会先“调用”父类的构造函数，注意“调用”和继承不是一个含义，实质上是“自动运行”。
继承（extends）的含义其实是“扩展”，子类完全没必要扩展父类的构造函数，因为反正每次调子类的时候都会“自动运行”它父类的构造函数，如果真的需要子类构造函数特殊的形式，子类直接修改或重载自己的构造函数就好了。
估计是你对“构造函数”的意义本身不理解，“调用”一个类有“继承”和“组合（说白了new 一个类）”两种方式，当你“调用”一个类的时候就会“自动运行”它的“构造函数”。

一个通俗的解释，这样好理解：构造函数和类同名，父类和子类肯定不同名，那父类的构造函数放在在子类里有什么用啊，那不成一般方法了吗？所以父类的构造函数是无法继承的。 


7、是否可以继承String 类? 【基础】
String类的方法头是:Public final class String extends Object
之所以不能被继承就是因为其中的修饰关键字 final
附： 什么样的类不能被继承？
　一，在Java中，只要是被定义为final的类，也可以说是被final修饰的类，就是不能被继承的。
　二，final是java中的一个关键字，可以用来修饰变量、方法和类。用关键词final修饰的域成为最终域。用关键词final修饰的变量一旦赋值，就不能改变，也称为修饰的标识为常量。如果一个类的域被关键字final所修饰，它的取值在程序的整个执行过程中将不会改变。
　三，假如说整个类都是final，就表明自己不希望从这个类继承，或者不答应其他任何人采取这种操作。换言之，出于这样或那样的原因，我们的类肯定不需要进行任何改变；或者出于安全方面的理由，我们不希望进行子类化（子类处理）。

8、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递? 【基础】
https://yq.aliyun.com/articles/607572

是值传递。Java编程语言只有值传递参数。

当一个对象实例作为一个参数被传递到方法中时，参数的值就是该对象的引用一个副本。指向同一个对象，对象的内容可以在被调用的方法中改变，但对象的引用(不是引用的副本)是永远不会改变的。
示例代码如下：
// 在函数中传递的是基本数据类型
public class Test {  
    public static void main(String[] args) {  
        int a = 3;  
        int b = 4;  
        change(a, b);  
  
        System.out.println("a=" + a); // 3
        System.out.println("b=" + b); // 4  
    }  

    public static void change(int i, int j) {  
        int temp = i;  
        i = j;  
        j = temp;  
    }  
}  
  
结果为:  

a=3  
b=4  

原因：参数中传递的是基本数据类型a和b的拷贝，在函数中交换的也是那份拷贝的值，而不是数据本身。

// 在函数中传的是引用数据类型  
public class Test {  
    public static void main(String[] args) {  
        int[] count = { 1, 2, 3, 4, 5 };  
        change(count);  // 6
    }    

    public static void change(int[] counts) {  
        counts[0] = 6;  
        System.out.println(counts[0]);  
    }  
} 
  
结果为：

6
  
原因：在方法中，传递引用数据类型int数组，实际上传递的是该数组的地址值，他们都指向数组对象，在方法中可以改变数组对象的内容。

传递的是对象的引用  
class A {  
    int i = 0;  
}  
  
public class Test {      
    public static void main(String args[]) {  
        A a = new A();  
        add(a); // 1  
        System.out.println(a.i);  // 0
    }  
    
    public static void add(A a) {  
        a = new A();  
        a.i++;
        System.out.println(a.i); 
    }  
}

结果为：

1
0  

原因：在该程序中，对象的引用指向的是A，而在add方法中，传递的引用的一份副本则指向了一个新的对象，并对新的对象进行操作。而原来的A对象并没有发生任何变化。引用指向的是还是原来的A对象。

// String 不改变，数组改变
public class Example {  
    public static void main(String args[]) {  
        Example ex = new Example();  
        ex.change(ex.str, ex.ch);  
        System.out.print(ex.str + " and "); // good and
        System.out.println(ex.ch); // gbc
    }  
    
    String str = new String("good"); // good 是常量，不能改
    
    char[] ch = { 'a', 'b', 'c' };  
  
    public void change(String str, char ch[]) {  
        str = "test ok"; // test ok 又是一个常量，也不能改 　　等价于 String str1 = new String("test ok");
        ch[0] = 'g';  
    }  
} 

结果为：

good and gbc 

原因：String类比较特别，看过String类代码的都知道，String类是final修饰的。所以值是不变的。 
函数中String对象引用的副本指向了另外一个新String对象，而数组对象引用的副本没有改变，而是改变对象中数据的内容。
对于对象类型，也就是Object的子类，如果你在方法中修改了它的成员的值，那个修改是生效的，方法调用结束后，它的成员是新的值；但是如果你把它指向一个其它的对象，方法调用结束后，原来对它的引用并没用指向新的对象。

9、String 和StringBuffer 的区别?【基础】

10、String, StringBuffer StringBuilder 的区别。【基础】
https://blog.csdn.net/u011702479/article/details/82262823

小结：（1）如果要操作少量的数据用 String；

（2）多线程操作字符串缓冲区下操作大量数据 StringBuffer；

（3）单线程操作字符串缓冲区下操作大量数据 StringBuilder。

11、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？【基础】

12、描述一下 JVM 加载 class 文件的原理机制？【中等】

13、interface可以有方法的实现吗？【中等】

14、是否可以从一个static 方法内部发出对非static 方法的调用？【基础】

15、GC 是什么? 为什么要有GC? 【基础】

16、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？【基础】

17、一个“.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？【基础】

18、Java 中的 final 关键字有哪些用法？【基础】

19、编码转换：怎样将GB2312 编码的字符串转换为ISO-8859-1 编码的字符串？【基础】

20、error 和exception 有什么区别? 【基础】

21、try{}里有一个return语句，那么紧跟在这个try后的finally{}里的代码会不会被执行，什么时候被执行，在return前还是后?【基础】

22、List,Set,Map 是否继承自Collection 接口？【基础】

23、说出ArrayList,Vector, LinkedList 的存储性能和特性？【基础】

24、HashMap 和Hashtable 的区别? 【基础】

25、Arraylist 与Vector 区别？【基础】

26、List、Map、Set 三个接口，存取元素时，各有什么特点？【基础】

27、sleep() 和wait() 有什么区别? 【基础】

28、当一个线程进入一个对象的一个synchronized 方法后，其它线程是否可进入此对象的其它方法? 【基础】

29、多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么? 【基础】

30、当一个线程进入一个对象的 synchronized 方法 A 之后，其它线程是否可进入此对象的 synchronized 方法 B？【中等】

31、简述synchronized 和java.util.concurrent.locks.Lock 的异同？【中等】

32、编写多线程程序有几种实现方式？【中等】

33、Java 中如何实现序列化，有什么意义？【中等】

二、数据库
34、阐述 JDBC 操作数据库的步骤。【基础】

35、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？【中等】

36、在进行数据库编程时，连接池有什么作用？【基础】

37、事务的ACID是指什么？【基础】

38、谈谈脏读、幻读和不可重复读？【中等】

39、JDBC中如何进行事务处理？【中等】

40、获得一个类的类对象有哪些方式？【基础】

41、JSP 有哪些内置对象？作用分别是什么？【基础】

42、get 和 post 请求的区别？【基础】

43、讲解 JSP 中的四种作用域。【基础】

三、SSM框架
44、MyBatis 中使用#和$书写占位符有什么区别？【中等】

45、解释一下 MyBatis 中命名空间（namespace）的作用。【中等】

46、什么是 IoC 和 DI？DI 是如何实现的？【中等】

47、解释一下什么叫 AOP（面向切面编程）？【基础】

48、你是如何理解"横切关注"这个概念的？【中等】

49、你如何理解 AOP 中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？【基础】

50、Spring 支持的事务管理类型有哪些？你在项目中使用哪种方式？【中等】

51、Spring MVC的工作原理是怎样的？【基础】

52、什么是 XSS 攻击？【困难】

53、SQL 注入攻击？【困难】

54、什么是CSRF攻击？【困难】

四、redis
55、使用redis有哪些好处？【基础】

56、Redis有哪些数据结构？【基础】

57、如果有大量的key需要设置同一时间过期，一般需要注意什么？【中等】

58、为什么Redis需要把所有数据放到内存中？【中等】

59、Redis提供了哪几种持久化方式？【中等】

60、如何选择合适的持久化方式？【中等】

61、redis支持的java客户端你用过哪个？【基础】

62、Redis集群的主从复制模型是怎样的？【困难】

63、Redis集群之间是如何复制的？【中等】

64、怎么测试Redis的连通性？【基础】

五、消息队列
65、为什么要用消息队列?【中等】

66、使用消息队列有什么缺点【中等】

67、为什么选用RocketMQ；RocketMQ和ActiveMQ的区别【困难】

68、RocketMQ是怎么保证系统高可用的？【困难】

69、消息中间件集群崩溃，如何保证百万生产数据不丢失？【中等】

六、spring boot
70、Spring Boot 的核心配置文件有哪几个？它们的区别是什么？【中等】

71、Spring Boot 的配置文件有哪几种格式？它们有什么区别？【中等】

72、Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？【基础】

73、开启 Spring Boot 特性有哪几种方式？【基础】

74、Spring Boot 需要独立的容器运行吗？【基础】

75、如何在 Spring Boot 启动的时候运行一些特定的代码？【中等】

76、Spring Boot 有哪几种读取配置的方式？【中等】

77、Spring Boot 如何定义多套不同环境配置？【中等】

78、SpringBoot中的定时任务如何实现？【中等】

79、我们如何连接一个像 MYSQL 或者 orcale 一样的外部数据库？【中等】

七、spring cloud
80、什么是微服务【中等】

81、微服务之间是如何独立通讯的spring Cloud和 Dubbo有哪些区別?【困难】

82、springcloud如何实现服务的注册和发现【中等】

83、Ribbon和Feign的区别【中等】

84、springcloud断路器的作用【中等】

85、springcloud如何实现服务的注册和发现【中等】

86、springcloud中的组件有那些？【中等】

八、其他
87、cookie和session的区别【基础】

88、一次完整的http请求过程【中等】

89、讲一下长连接【困难】

90、TCP如何保证可靠传输？【困难】

91、URI和URL的区别【中等】

92、http和https的区别？【中等】

93、docker常用命令【中等】

94、什么是Docker镜像？【中等】

95、什么是Docker容器？【中等】

96、什么是Docker Hub？【中等】

97、什么是 Git 复刻（fork）？复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？【中等】

98、“git pull”和“git fetch”之间有什么区别？【中等】

99、使用Ajax的优缺点分别是什么？【中等】

100、跨域问题，谁限制的跨域，怎么解决【困难】

